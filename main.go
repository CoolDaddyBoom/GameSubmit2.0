package main

import (
	"fmt"
	"math/rand"
	"time"
)

type Difficulty struct {
	Mode      string
	MaxNumber int
	Attempts  int
}

func inputNumber(attempt, maxNumber int) (int, bool) {
	fmt.Printf("–ü–æ–ø—ã—Ç–∫–∞ %d: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ", attempt)
	var userNumber int
	_, err := fmt.Scanln(&userNumber)
	if err != nil {
		fmt.Printf("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ %d.\n", maxNumber)
		var clear string
		fmt.Scanln(&clear)
		return 0, false
	}

	if userNumber < 1 || userNumber > maxNumber {
		fmt.Printf("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ %d.\n", maxNumber)
		return 0, false
	}

	return userNumber, true
}

func generateRandomNumber(maxNumber int) int {
	rand.Seed(time.Now().UnixNano())
	return rand.Intn(maxNumber) + 1
}

func compareAndHint(userNumber, randomNumber int) bool {
	if userNumber == randomNumber {
		return true
	}

	if randomNumber > userNumber {
		if randomNumber-userNumber <= 5 {
			fmt.Println("üî• –ì–æ—Ä—è—á–æ")
		} else if randomNumber-userNumber <= 15 {
			fmt.Println("üôÇ –¢–µ–ø–ª–æ")
		} else {
			fmt.Println("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ")
		}
		fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ üëÜ")
	} else {
		if userNumber-randomNumber <= 5 {
			fmt.Println("üî• –ì–æ—Ä—è—á–æ")
		} else if userNumber-randomNumber <= 15 {
			fmt.Println("üôÇ –¢–µ–ø–ª–æ")
		} else {
			fmt.Println("‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ")
		}
		fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ üëá")
	}
	return false
}

func selectDifficulty(difficulties []Difficulty) (Difficulty, bool) {
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:")
	for i, d := range difficulties {
		fmt.Printf("%d. %s (1‚Äì%d, %d –ø–æ–ø—ã—Ç–æ–∫)\n", i+1, d.Mode, d.MaxNumber, d.Attempts)
	}
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1‚Äì3): ")

	var choice int
	_, err := fmt.Scanln(&choice)
	if err != nil || choice < 1 || choice > 3 {
		fmt.Println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
		var clear string
		fmt.Scanln(&clear)
		return Difficulty{}, false
	}

	return difficulties[choice-1], true
}

func playGame(difficulty Difficulty) {
	fmt.Printf("–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' ‚Äî –æ—Ç 1 –¥–æ %d –Ω–∞—á–∞–ª–∞—Å—å!\n", difficulty.MaxNumber)
	fmt.Printf("–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∑–∞ %d –ø–æ–ø—ã—Ç–æ–∫!\n", difficulty.Attempts)

	randomNumber := generateRandomNumber(difficulty.MaxNumber)
	attempt := 1
	rememberNum := make([]int, 0, difficulty.Attempts)

	for attempt <= difficulty.Attempts {
		userNumber, ok := inputNumber(attempt, difficulty.MaxNumber)
		if !ok {
			continue
		}

		rememberNum = append(rememberNum, userNumber)
		fmt.Printf("–í–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤–∞–º–∏ —á–∏—Å–ª–∞: %v\n", rememberNum)

		if compareAndHint(userNumber, randomNumber) {
			if attempt == 1 {
				fmt.Printf("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –≤—Å–µ–≥–æ %d –ø–æ–ø—ã—Ç–∫—É\n", attempt)
			} else if attempt <= 4 {
				fmt.Printf("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –≤—Å–µ–≥–æ %d –ø–æ–ø—ã—Ç–∫–∏\n", attempt)
			} else {
				fmt.Printf("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ %d –ø–æ–ø—ã—Ç–æ–∫\n", attempt)
			}
			return
		}

		attempt++
	}

	fmt.Printf("üò¢ –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: %d\n", randomNumber)
}

func main() {

	difficulties := []Difficulty{
		{Mode: "Easy", MaxNumber: 50, Attempts: 15},
		{Mode: "Medium", MaxNumber: 100, Attempts: 10},
		{Mode: "Hard", MaxNumber: 200, Attempts: 5},
	}

	for {

		difficulty, ok := selectDifficulty(difficulties)
		if !ok {
			continue
		}

		playGame(difficulty)

		fmt.Println("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!")

		fmt.Print("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? (y/n): ")
		var response string
		_, err := fmt.Scanln(&response)
		if err != nil {
			var clear string
			fmt.Scanln(&clear)
			continue
		}

		if response != "y" && response != "Y" {
			break
		}
	}

	fmt.Println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
}
